#注意使用项目文件

import maya.cmds as mc
mc.polySphere()

http://help.autodesk.com/view/MAYAUL/2015/ENU/
maya中文帮助文档

http://help.autodesk.com/view/MAYAUL/2016/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_mesh_html
注意这个笔记


Ctrl + H 影藏物体

Ctrl + D 复制物体

G 重复上一个命令

S 快速k帧


按住Insert可以局部修改骨骼的位置

骨架创建好后需要看方向


刷骨骼笔刷时 ctrl 反选 shift 微调

F8点模式--窗口--常规编辑器--组件编辑器--平滑蒙皮--选择点


import maya.cmds as cmds

# Non-planar faces
cmds.polyPlane( n='plg1', sx=5, sy=5, w=5, h=5 )
cmds.move( -6, 0, 0 )
cmds.polyMoveVertex( 'plg1.vtx[7]', 'plg1.vtx[10]', 'plg1.vtx[25]', 'plg1.vtx[28]', ltz=1 )
cmds.polyTriangulate( 'plg1.f[0:1]', 'plg1.f[5:6]', 'plg1.f[3:4]', 'plg1.f[8:9]', 'plg1.f[15:16]', 'plg1.f[20:21]', 'plg1.f[18:19]', 'plg1.f[23:24]' )

Clausewitz Engine
paradox引擎 源码

http://www.moddb.com/engines/clausewitz-engine

download.autodesk.com/global/docs/maya2012/en_us/index.html

OpenMaya.MFnMesh Class Reference
https://knowledge.autodesk.com/zh-hans/search-result/caas/CloudHelp/cloudhelp/2016/CHS/Maya-SDK/py-ref/class-open-maya-1-1-m-fn-mesh-html.html

http://download.autodesk.com/us/maya/2010help/api/class_m_fn_mesh.html

http://www.charactersetup.com/tutorial_skinWeights.html


// 导入骨架
import pymel.core as pmc
import pymel.core.datatypes as pmdt
new_bone = pmc.joint()
pmc.select(new_bone)
pmc.rename(new_bone, "base")
pmc.parent(new_bone, world = True)

q=((x,y,z)sinθ2, cosθ2) 

// 自动关键帧的工具
pmc.currentTime(0)
pmc.select("pCube1")
pmc.move( 1, 1, 1 )
pmc.setKeyframe()

pmc.currentTime(0)
pmc.select("pPipe1")
pmc.move( 8, 8, 1 )
pmc.setKeyframe()

// 
import 

	import maya.OpenMaya as OpenMaya
	# vertices
    numVertices = 0
    vertexArray = OpenMaya.MFloatPointArray()   # array of points
    for i in xrange(0, len(verts), 3):
        v = OpenMaya.MFloatPoint(verts[i], verts[i+1], verts[i+2])
        vertexArray.append(v)
        numVertices += 1

    # faces
    numPolygons = len(tris) / 3
    polygonCounts = OpenMaya.MIntArray()    # count of vertices per poly
    for i in range(0, numPolygons):
        polygonCounts.append(3)
    # OpenMaya.MScriptUtil.createIntArrayFromList([3]*numPolygons, polygonCounts)

    # vert connections
    polygonConnects = OpenMaya.MIntArray()
    for item in tris:
        polygonConnects.append(item)
    # OpenMaya.MScriptUtil.createIntArrayFromList(tris, polygonConnects)

    # default UVs
    uArray = OpenMaya.MFloatArray()
    vArray = OpenMaya.MFloatArray()
    if uv_Ch.get(0):
        uv_data = uv_Ch[0]
        for i in xrange(0, len(uv_data), 2):
            uArray.append(uv_data[i])
            vArray.append(1 - uv_data[i+1])        # flip the UV coords in V!

    """ ================================================================================================================
        create the new mesh """
    mFn_Mesh.create(numVertices, numPolygons, vertexArray, polygonCounts, polygonConnects, uArray, vArray, new_object)
    mFn_Mesh.setName(tmp_mesh_name)
    m_DagMod.doIt()     # sets up the transform parent to the mesh shape

    # PyNode for the mesh
    new_mesh = pmc.PyNode(tmp_mesh_name)
    new_transform = pmc.listRelatives(new_mesh, type='transform', parent=True)[0]
	
	
import maya.OpenMaya as OpenMaya

numVertices = 3
vertexArray = OpenMaya.MFloatPointArray()
v = OpenMaya.MFloatPoint(0.0, 0.0, 0.0)
vertexArray.append(v)
v = OpenMaya.MFloatPoint(0.0, 1.0, 0.0)
vertexArray.append(v)
v = OpenMaya.MFloatPoint(1.0, 0.0, 0.0)
vertexArray.append(v)

numPolygons = 3
polygonCounts = OpenMaya.MIntArray()
polygonCounts.append(3)

polygonConnects = OpenMaya.MIntArray()
polygonConnects.append(0)
polygonConnects.append(1)
polygonConnects.append(2)

uArray = OpenMaya.MFloatArray()
vArray = OpenMaya.MFloatArray()


uArray.append(0.0)
uArray.append(0.0)
uArray.append(1.0)

vArray.append(1.0)
vArray.append(0.0)
vArray.append(1.0)

tmp_mesh_name = "test_mesh"

mFn_Mesh = OpenMaya.MFnMesh()
m_DagMod = OpenMaya.MDagModifier()
new_object = m_DagMod.createNode('transform')

mFn_Mesh.create(numVertices, numPolygons, vertexArray, polygonCounts, polygonConnects, uArray, vArray, new_object)
mFn_Mesh.setName(tmp_mesh_name)
m_DagMod.doIt()     # sets up the transform parent to the mesh shape

# PyNode for the mesh
new_mesh = pmc.PyNode(tmp_mesh_name)
new_transform = pmc.listRelatives(new_mesh, type='transform', parent=True)[0]


http://help.autodesk.com/view/MAYAUL/2017/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_mesh_html

http://ewertb.soundlinker.com/api/api.010.php
add uvset

多个uvset不应该在create的时候提供，而应该在后期提供
uv的顺序是跟着vertexIndex来走的，只要每个三角形能找到自己的uv坐标即可

软边
硬边
分列前 分裂后

uv 切割后，同一个位置的顶点，会对应不同位置的uv

https://www.youtube.com/watch?v=-HL_Upp5YBc
Stepping Up the UV process ( Full modeling / texturing tutorial )


help
http://help.autodesk.com/view/MAYAUL/2016/CHS/?guid=__py_ref_class_open_maya_1_1_m_quaternion_html


#########################

http://help.autodesk.com/view/MAYAUL/2016/CHS/?guid=__py_ref_class_open_maya_anim_1_1_m_fn_skin_cluster_html


给模型添加材质
shadingNode -asShader lambert;
// 结果: lambert3 // 
sets -renderable true -noSurfaceShader true -empty -name lambert3SG;
// 结果: lambert3SG // 
connectAttr -f lambert3.outColor lambert3SG.surfaceShader;
// 结果: 已将 lambert3.outColor 连接到 lambert3SG.surfaceShader。 // 
assignCreatedShader "lambert" "" lambert3 "pCone1.f[17:19]";
sets -e -forceElement lambert3SG;


"pSphere1.f[207:208] pSphere1.f[227:228] pSphere1.f[237] pSphere1.f[253] pSphere1.f[257] pSphere1.f[273]"


https://knowledge.autodesk.com/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2016/ENU/Maya/files/GUID-6BA1E3DF-F033-443C-989F-9A3295FFC152-htm.html





import pymel.core as pmc

shader_name = "body_shader"
new_shader = pmc.shadingNode("lambert", asShader=True, name=shader_name)
new_shadinggroup = pmc.sets(renderable=True, noSurfaceShader=True, empty=True, name='{}_SG'.format(shader_name))
pmc.connectAttr(new_shader.outColor, new_shadinggroup.surfaceShader)

pmc.select("pCube1.f[0]")
pmc.hyperShade(assign=new_shadinggroup)


# TODO: should this be an enum attribute type?
# would need to parse the possible engine/material combinations from clausewitz.json
#pmc.addAttr(longName=PDX_SHADER, dataType='string')
#getattr(new_shader, PDX_SHADER).set(PDX_material.shader)


# main()	
if __name__ == "__main__":
	pModel_path = "D:\\Projects\\Meteor\\Game\\Meteor\\pmodel\\"
	npc_id = 3
	
	bnc_path = pModel_path + "P{0}.bnc".format(int(npc_id))
	skc_path = pModel_path + "p{0}.skc".format(int(npc_id))
	mesh_name = "p{0}".format(int(npc_id))
	amb_path = pModel_path + "p{0}.amb.txt".format(int(npc_id))
	
	read_bnc_file(bnc_path, "")
	print "import bnc succed"
	
	read_skc_file(skc_path, mesh_name)
	print "import skc succed"
	
	# 注意先后顺序，必须放在后面
	read_amb_file(amb_path)
	print "import amb succed"
	
	
import pymel.core as pmc
import pymel.core.datatypes as pmdt

pmc.select("d_base")
pmc.parent("d_base", world=True)

pmc.select("NULL")
pmc.delete("NULL")

for frame_index in range(0, 17065):
	pmc.currentTime(int(frame_index))
	pmc.select("d_base")
	rotateX = pmc.getAttr("d_base.rotateX")
	rotateY = pmc.getAttr("d_base.rotateY")
	rotateZ = pmc.getAttr("d_base.rotateZ")
	
	transX = pmc.getAttr("d_base.translateX")
	transY = pmc.getAttr("d_base.translateY")
	transZ = pmc.getAttr("d_base.translateZ")
	
	if rotateX != 0 or rotateY != 0 or rotateZ != 0:
		print "{"
		print frame_index
		print rotateX
		print rotateY
		print rotateZ
		print "}"
	
	rotateX += -90 
	
	euler = pmdt.EulerRotation([rotateX, rotateY, rotateZ], unit= "degrees", ord = "ZYX")
	mat = euler.asMatrix()
	
	mat.a30 = transX
	mat.a31 = transY
	mat.a32 = transZ
	
	pmc.xform(matrix = mat)
	
	pmc.setKeyframe()
	print frame_index

修改maya的轴向 从
Switch between Y-up and Z-up
1 Select Window > Settings/Preferences > Preferences and click on Settings.
2 Under World Coordinate System, click Y or Z.

窗口--首选项--设置--世界坐标系



https://forums.autodesk.com/t5/maya-animation-and-rigging/converting-a-rig-from-z-up-to-y-up/td-p/4018806






	
	
import pymel.core as pmc
import pymel.core.datatypes as pmdt

pmc.select("d_base")

for frame_index in range(0, 650):
	pmc.currentTime(int(frame_index))
	
	pmc.select("d_base")
	transX = pmc.getAttr("d_base.translateX")
	transY = pmc.getAttr("d_base.translateY")
	transZ = pmc.getAttr("d_base.translateZ")
	
	pmc.select("b")
	b_transX = pmc.getAttr("b.translateX")
	b_transY = pmc.getAttr("b.translateY")
	b_transZ = pmc.getAttr("b.translateZ")
	
	print "{"
	print frame_index
	
	print transX
	print transY
	print transZ
	
	print b_transX
	print b_transY
	print b_transZ
	
	print "}"
	
	#pmc.select("d_base")
	#pmc.xform(t = (b_transX, b_transY, transZ))
	
	#pmc.select("b")
	#pmc.xform(t = (transX, transY, transZ))
	
	#pmc.setKeyframe()
	#print frame_index
	

	pmc.currentTime(int(frame_index))
	pmc.select(bone.bone_name)
	pmc.xform(matrix = maya_mat)
	pmc.setKeyframe()
	
	
# modify jump base move
import pymel.core as pmc
import pymel.core.datatypes as pmdt

pmc.select("d_base")

for frame_index in range(655, 669 + 1):
	
	pmc.currentTime(int(frame_index))
	pmc.select("d_base")
	pmc.xform(t = (0, 0, 0))
	pmc.setKeyframe()
	
	print frame_index
	

#将rootmotion清除掉
import pymel.core as pmc
import pymel.core.datatypes as pmdt

for frame_index in range(646, 826):
	pmc.currentTime(int(frame_index))
	pmc.select("d_base")
	
	pmc.xform(t = (0, 0, 0))
	
	pmc.setKeyframe()
	
	transZ = pmc.getAttr("d_base.translateZ")
	
	frame_Z = "%d,%f" % (frame_index, transZ) 
	
	print frame_Z
	
	
	
	

	